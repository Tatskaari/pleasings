def oci_image(name:str, base_image:str='', srcs:list=[], image:str='', version:str='',
                 dockerfile:str='', containerfile:str='', entrypoint:list=[], repo:str='', labels:list=[],
                 run_args:str='', test_only:bool=False, visibility:list=None):
    """oci_image defines a build rule for an OCI image.

    You must use `plz run` to actually build the target.

    Args:
      name: Name of the rule.
      base_image: The build target that defines the base image. Only necessary if this image
                  is based off another plz image.
      srcs: Source files that are available within the containerfile.
      image: Name of the image to create.
      containerfile: The Dockerfile that defines how to build this image.
      repo: Repository to store this image in. If not given then you'll need to set
            default-oci-repo in the [buildconfig] section of your .plzconfig.
      labels: Labels to tag this rule with.
      run_args: Any additional arguments to provide to 'oci run'.
      test_only: If True, this can only be depended on by test rules.
      visibility: Visibility of this rule.
    """
    image = image or f"$PKG/{name}"
    assert not image.startswith('//'), 'image argument is not a build label (should not start with //)'
    if dockerfile:
        containerfile = dockerfile

    # image rule, builds the image and stores it as an oci formatted directory.
    all_srcs = {}
    context = ""
    cmd = ["trap '$TOOL rmi -af' EXIT"]
    if base_image:
        if base_image.startswith("//") or base_image.startswith(":"):
            all_srcs['base'] = [f'{base_image}']
            base_image = 'from oci:"$SRCS_BASE"'
        else:
            base_image = f'from "{base_image}"'
    if srcs:
        context = "$TMPDIR/context"
        all_srcs['context'] = srcs
        cmd += [f"mkdir {context}", f"mv $SRCS_CONTEXT {context}"]
    if containerfile:
        all_srcs['containerfile'] = [f'{containerfile}']
        containerfile = '-f "$SRCS_CONTAINERFILE"'
        if base_image:
            base_image = f'--{base_image}'
        cmd += [f'$TOOL bud --timestamp 0 {base_image} {containerfile} -t "{image}" {context}']
    else:
        cmd += [f'ctr=$($TOOL {base_image})']
        if srcs:
            cmd += [f'$TOOL copy "$ctr" {context} .']
        if entrypoint:
            cmd += [f'$TOOL config --entrypoint "{entrypoint}" "$ctr"']
        cmd += [f'$TOOL commit "$ctr" "{image}"']
    cmd += [f'$TOOL push "{image}" "oci:$OUT"']
    image_rule = genrule(
        name = name,
        srcs = all_srcs,
        cmd = ' && '.join(cmd),
        outs = [f'{name}_oci'],
        labels = labels + ["oci-image"],
        visibility = visibility,
        test_only = test_only,
        tools = [CONFIG.BUILDAH_TOOL],
    )

    if version:
        srcs = []
    else:
        srcs = [image_rule]
        if CONFIG.HOSTOS == 'linux':
            version = f'$(echo $(hash {image_rule}) | sha256sum - | cut -f1 -d" ")'
        elif CONFIG.HOSTOS == 'darwin':
            version = f'$(echo $(hash {image_rule}) | shasum -a 256 - | cut -f1 -d" ")'
        else:
            version = 'no_idea_how_to_compute_version_on_this_host'
    tag_rule = build_rule(
        name = name + '_tag',
        srcs = srcs,
        cmd = f'echo -n "{version}" >> $OUT',
        outs = [f'{name}_tag'],
        labels = labels + ["oci-tag"],
        visibility = visibility,
        test_only = test_only,
    )

    if repo:
        repo += "/"
    fqn = build_rule(
        name = name + '_fqn',
        srcs = [tag_rule],
        cmd = f'echo -n "{repo}{image}:`cat $SRC`" >> $OUT',
        outs = [f'{name}_fqn'],
        labels = labels + ["oci-fqn"],
        visibility = visibility,
        test_only = test_only,
    )

    # save_rule, duplicates build rule to match docker_image build defs
    sh_cmd(
        name = name + '_save',
        data = [image_rule],
        cmd = '',
        visibility = visibility,
        test_only = test_only,
        labels = labels + ["oci-save"],
    )

    # run_rule, loads the image and runs it using podman or docke if podman not found.
    if run_args:
        run_args = f"-- {run_args}"
    cmd = f'''
    if ! command -v {CONFIG.PODMAN_TOOL} &> /dev/null; then
        {CONFIG.SKOPEO_TOOL} copy -q oci:$(out_location {image_rule}) "docker-daemon:`cat $SRC`"
        docker run -it `cat $SRC` {run_args} \\\$@
    else
        {CONFIG.PODMAN_TOOL} run -it oci:$(out_location {image_rule}) {run_args} \\\$@
    fi'''
    sh_cmd(
        name = name + '_run',
        cmd = cmd,
        srcs = [fqn],
        data = [image_rule],
        visibility = visibility,
        test_only = test_only,
        labels = labels + ["oci-run"],
    )

    # push_rule, push the image to a registry or other destination
    # Configured with env vars:
    # DEST: (skopeo repository type https://github.com/containers/skopeo), default is docker://
    # REPO: e.g. docker.io/library, default is as provided on build target
    # TAG: Image tag, default is version on the build target, or a unique hash.
    cmd = f'{CONFIG.SKOPEO_TOOL} copy oci:$(out_location {image_rule}) '
    cmd += f'\\\${{DEST:-docker://}}\\\${{REPO:-{repo}}}\\\${{REPO:+/}}{image}:\\\${{TAG:-`cat $SRC`}}'
    sh_cmd(
        name = name + '_push',
        cmd = cmd,
        srcs = [tag_rule],
        data = [image_rule],
        visibility = visibility,
        test_only = test_only,
        labels = labels + ["oci-push"],
    )
    # load_rule, essentially copy_rule but with the destination set to 'docker-daemon:'
    sh_cmd(
        name = name + '_load',
        cmd = ['export DEST="docker-daemon:"', cmd],
        srcs = [tag_rule],
        data = [image_rule],
        visibility = visibility,
        test_only = test_only,
        labels = labels + ["oci-load"],
    )

    return image_rule


CONFIG.setdefault('BUILDAH_TOOL', 'buildah')
CONFIG.setdefault('SKOPEO_TOOL', 'skopeo')
CONFIG.setdefault('PODMAN_TOOL', 'podman')
